{{define "base"}}
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
  </head>


  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="/">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/about">About</a>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="fa">
                Rooms
              </a>

              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/generals-quarter">General's Quarters</a></li>
                <li><a class="dropdown-item" href="/majors-suite">Major's Suit</a></li>
              
              </ul>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/search-availability" tabindex="-1" aria-disabled="true" >Book now </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/contact" tabindex="-1" aria-disabled="true" >Contact</a>
            </li>
          </ul>
         
        </div>
      </div>
    </nav>

      {{block "css" .}}

      {{end}}
          
      {{block "content" .}}
  
      {{end}}

    </head>
    <body>

      {{block "content" .}}
      
      {{end}}


        <div class="row my-footer">
          <div class="col">Left</div>
          <div class="col">Middle</div>
          <div class="col">Right</div>
        </div>
        
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

    {{block "js" .}}
    
    {{end}}



 <script>

      let attention = Prompt();

      (()=>{
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
          form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
              event.preventDefault();
              event.stopPropagation();
            }

            form.classList.add('was-validated');
          }, false);
        });
        }
      )();



      function notify(msg , msgType){
          notie.alert({
            text: msg,
            type: msgType,
          })
      }

      function notifyModal(title , text , icon , confirmButtonText){
        Swal.fire({
          title: title,
          text: text,
          icon: icon,
          confirmButtonText: confirmButtonText
        })
      }

      //Prompt is our JavaScript module for all alerts , notifications and custom popup dialogs.
      function Prompt(){

        
        let toast = function(c){
          const {
            msg = "",
            icon ="success",
            position = "top-end",
          } = c;

          const Toast = Swal.mixin({
            toast: true,
            title:msg,
            position: position,
            icon : icon,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
              toast.addEventListener('mouseenter', Swal.stopTimer)
              toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
          })

          Toast.fire({})
        }

        let success = function(c) {
          const {
            title = "",
            footer = "",
            msg ="",
            

          } = c;
          Swal.fire({
            icon : "success",
            title: title,
            footer : footer,
            text : msg,
          })
        }

        let error = function(c) {
          const {
            title = "",
            footer = "",
            msg ="",
            

          } = c;
          Swal.fire({
            icon : "error",
            title: title,
            footer : footer,
            text : msg,
          })
        }

        return{
          toast:toast,
          success:success,
          error:error,
          custom:custom,
        }
      }

      async function custom(c){
        const {
          msg = "",
          title = "",           
        } =c;

        const { value: result } = await Swal.fire({
          title: title,
          html: msg,
          focusConfirm: false,
          backDrop:false,
          showCancelButton : true, 
         
          preConfirm: () => {

            return [
              document.getElementById('start').removeAttribute('disabled'),
              document.getElementById('end').removeAttribute('disabled')
            ]
          } 
        })

        if (result) {
          if(result.dismiss !== Swal.DismissReason.cancel){
            if(result.value !== "")
                if(c.callback !== undefined){
                  c.callback(result);
                }else{
                  c.callback(false);
                }
          }else{
            c.callback(false);
          }
        }else{
          c.callback(false);
        }
      }

    </script> 
  </body>
</html>

{{end}}